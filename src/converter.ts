import fs from "fs-extra";
import path from "path";
import { Feed } from "feed";
import {
  S3Client,
  GetObjectCommand,
  PutObjectCommand,
  ListObjectsV2Command,
} from "@aws-sdk/client-s3";
import { r2Config } from "./config";

// Define the interfaces for our data
interface Article {
  id: number;
  title: string;
  url: string;
  rewritten_title: string;
  rewritten_content: string;
  original_content: string;
  summary?: string;
}

interface ProcessedArticle {
  id: number;
  title: string;
  rewritten_title: string;
  url: string;
  filename: string;
  summary?: string;
}

interface WeeklyArticles {
  weekId: string; // Format: YYYY-WW (e.g., 2024-12)
  articles: Article[];
  lastUpdated: string;
}

function getWeekId(date: Date = new Date()): string {
  const year = date.getFullYear();
  // Get ISO week number (1-53)
  const week = Math.ceil(
    ((date.getTime() - new Date(year, 0, 1).getTime()) / 86400000 +
      new Date(year, 0, 1).getDay() +
      1) /
      7
  );
  return `${year}-${String(week).padStart(2, "0")}`;
}

async function mergeWithWeeklyHistory(
  newArticles: Article[],
  r2Client: S3Client,
  weekId: string
): Promise<WeeklyArticles> {
  try {
    let weeklyData: WeeklyArticles;

    try {
      const existingData = await r2Client.send(
        new GetObjectCommand({
          Bucket: r2Config.bucketName,
          Key: `weekly/${weekId}.json`,
        })
      );

      if (existingData.Body) {
        const bodyText = await existingData.Body.transformToString();
        weeklyData = JSON.parse(bodyText);
        // Merge new articles, avoid duplicates by id
        const existingIds = new Set(weeklyData.articles.map((a) => a.id));
        weeklyData.articles = [
          ...weeklyData.articles,
          ...newArticles.filter((a) => !existingIds.has(a.id)),
        ];
      } else {
        throw new Error("No existing data");
      }
    } catch (error) {
      // If file doesn't exist or other error, create new weekly data
      weeklyData = {
        weekId,
        articles: newArticles,
        lastUpdated: new Date().toISOString(),
      };
    }

    // Sort by id descending (newest first)
    weeklyData.articles.sort((a, b) => b.id - a.id);
    weeklyData.lastUpdated = new Date().toISOString();

    // Save back to R2
    await r2Client.send(
      new PutObjectCommand({
        Bucket: r2Config.bucketName,
        Key: `weekly/${weekId}.json`,
        Body: JSON.stringify(weeklyData),
        ContentType: "application/json",
        CacheControl: "public, max-age=3600",
      })
    );

    return weeklyData;
  } catch (error) {
    console.error(`Error merging weekly history for ${weekId}:`, error);
    throw error;
  }
}

/**
 * Converts markdown to HTML using remark
 */
async function markdownToHtml(markdown: string): Promise<string> {
  // Use dynamic imports for ESM modules
  const { remark } = await import("remark");
  const remarkHtml = await import("remark-html");

  const result = await remark().use(remarkHtml.default).process(markdown);

  return result.toString();
}

/**
 * Creates a simple back to index link
 */
function createBackToIndex(): string {
  return `<div class="back-to-index"><a href="index.html">← Back to Index</a></div>`;
}

/**
 * Creates a card-based list of articles for the index page
 */
function createArticleCards(
  articles: ProcessedArticle[],
  isHistoryPage: boolean = false
): string {
  return articles
    .map(
      (article) => `
    <div class="article-card" data-article-id="${article.id}">
      <div class="article-header">
        <h2><a href="${isHistoryPage ? "../" : ""}${article.filename}">${
        article.rewritten_title
      }</a></h2>
        <button class="mark-read-btn" onclick="toggleRead(${article.id})">
          <span class="mark-read-text">Mark as Read</span>
          <span class="mark-unread-text">Mark as Unread</span>
        </button>
      </div>
      <div class="article-meta">
        <span class="original-title">${article.title}</span>
        <a href="${
          article.url
        }" target="_blank" class="article-source">Source</a>
      </div>
      ${
        article.summary
          ? `<div class="article-summary">${article.summary}</div>`
          : ""
      }
    </div>
  `
    )
    .join("\n");
}

/**
 * Creates a footer with timestamp
 */
function createFooter(): string {
  const timestamp = new Date().toLocaleString("zh-CN", {
    timeZone: "Asia/Shanghai",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  });
  return `
<footer class="footer">
  <p>Generated by <a href="https://github.com/liuzhch1/hacker-news-cn">Github Actions</a> on ${timestamp}(北京时间)</p>
</footer>`;
}

/**
 * Creates a weekly navigation link
 */
function createWeeklyNavigation(weekId: string): string {
  return `
  <div class="weekly-navigation">
    <h2>当前周: ${weekId}</h2>
    <p>
      查看 <a href="./history/${weekId}.html">本周所有文章</a> 或 
      浏览 <a href="./history/index.html">历史文章</a>
    </p>
  </div>`;
}

async function generateWeeklyPage(
  weeklyData: WeeklyArticles,
  outputDir: string
): Promise<void> {
  const historyDir = path.join(outputDir, "history");
  await fs.ensureDir(historyDir);

  const weeklyPath = path.join(historyDir, `${weeklyData.weekId}.html`);

  // Convert articles to ProcessedArticle type
  const processedArticles: ProcessedArticle[] = weeklyData.articles.map(
    (article) => {
      const sanitizedTitle = article.title
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/(^-|-$)/g, "");

      return {
        id: article.id,
        title: article.title,
        rewritten_title: article.rewritten_title || article.title,
        url: article.url,
        filename: `${article.id}-${sanitizedTitle}.html`,
        summary: article.summary,
      };
    }
  );

  const articleCards = createArticleCards(processedArticles, true);

  const weeklyHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hacker News Posts - Week ${weeklyData.weekId}</title>
  <link rel="stylesheet" href="../css/style.css">
</head>
<body id="top">
  <div class="back-to-index"><a href="../index.html">← Back to Latest</a></div>
  
  <h1>Hacker News Posts - Week ${weeklyData.weekId}</h1>
  <div class="last-updated">Last updated: ${new Date(
    weeklyData.lastUpdated
  ).toLocaleString()}</div>
  
  <div class="article-list">
    ${articleCards}
  </div>
  
  <a href="#top" class="back-to-top" title="Back to top">↑</a>
  
  ${createFooter()}
  <script>
    function toggleRead(articleId) {
      const card = document.querySelector(\`.article-card[data-article-id="\${articleId}"]\`);
      const readArticles = JSON.parse(localStorage.getItem('readArticles') || '[]');
      
      if (card.classList.contains('read')) {
        card.classList.remove('read');
        const index = readArticles.indexOf(articleId);
        if (index > -1) readArticles.splice(index, 1);
      } else {
        card.classList.add('read');
        if (!readArticles.includes(articleId)) readArticles.push(articleId);
      }
      
      localStorage.setItem('readArticles', JSON.stringify(readArticles));
    }

    document.addEventListener('DOMContentLoaded', () => {
      const readArticles = JSON.parse(localStorage.getItem('readArticles') || '[]');
      readArticles.forEach(id => {
        const card = document.querySelector(\`.article-card[data-article-id="\${id}"]\`);
        if (card) card.classList.add('read');
      });
    });
  </script>
</body>
</html>`;

  await fs.writeFile(weeklyPath, weeklyHtml);
}

/**
 * Generates RSS feed from articles
 */
async function generateRssFeed(
  articles: ProcessedArticle[],
  outputDir: string,
  fullArticles: Article[]
): Promise<void> {
  // Create a new feed
  const feed = new Feed({
    title: "Hacker News AI 中文翻译",
    description: "Hacker News AI 中文翻译 每日更新",
    id: "https://liuzhch1.github.io/hacker-news-cn/",
    link: "https://liuzhch1.github.io/hacker-news-cn/",
    language: "zh-CN",
    image: "https://liuzhch1.github.io/hacker-news-cn/image.png",
    favicon: "https://liuzhch1.github.io/hacker-news-cn/favicon.ico",
    copyright: "Hacker News",
    updated: new Date(),
    generator: "Hacker News Feed Generator",
    feedLinks: {
      rss: "https://liuzhch1.github.io/hacker-news-cn/rss.xml",
    },
    author: {
      name: "Hacker News AI 中文翻译",
    },
  });

  // Add articles to feed
  for (const article of articles) {
    // Find the full article data
    const fullArticle = fullArticles.find((a) => a.id === article.id);
    if (!fullArticle) continue;

    // Convert markdown content to HTML
    const sourceLink = `<p>Source:<br/><a href="${fullArticle.url}" target="_blank">${fullArticle.url}</a></p>`;
    const separator = "<hr>";
    const markdownContent = await markdownToHtml(fullArticle.rewritten_content);

    // Add summary to feed content if available
    const summaryHtml = fullArticle.summary
      ? `<div>${fullArticle.summary}</div>${separator}`
      : "";

    const htmlContent = `${summaryHtml}${sourceLink}${separator}${markdownContent}`;

    // Create a short description (first 280 chars of content)
    const plainTextDescription =
      fullArticle.summary ||
      fullArticle.rewritten_content
        .replace(/[#*`_]/g, "") // Remove markdown formatting
        .substring(0, 280) + "...";

    feed.addItem({
      title: article.rewritten_title,
      id: article.id.toString(),
      link: `https://liuzhch1.github.io/hacker-news-cn/${article.filename}`,
      description: plainTextDescription,
      content: htmlContent,
      author: [
        {
          name: "Hacker News AI 中文翻译",
        },
      ],
      date: new Date(),
    });
  }

  // Write RSS feed to file
  const outputPath = path.join(outputDir, "rss.xml");
  return fs.writeFile(outputPath, feed.rss2());
}

// Add this new function
async function listWeeklyFiles(r2Client: S3Client): Promise<string[]> {
  try {
    const { ListObjectsV2Command } = await import("@aws-sdk/client-s3");
    const command = new ListObjectsV2Command({
      Bucket: r2Config.bucketName,
      Prefix: "weekly/",
    });

    const response = await r2Client.send(command);
    return (response.Contents || [])
      .map((obj) => obj.Key?.replace("weekly/", "").replace(".json", ""))
      .filter((key): key is string => !!key)
      .sort()
      .reverse();
  } catch (error) {
    console.error("Error listing weekly files:", error);
    return [];
  }
}

async function generateHistoryIndexPage(
  weeks: string[],
  outputDir: string
): Promise<void> {
  const historyDir = path.join(outputDir, "history");
  await fs.ensureDir(historyDir);
  const indexPath = path.join(historyDir, "index.html");

  const weeksList = weeks
    .map(
      (week) => `
    <div class="week-entry">
      <a href="./${week}.html" class="week-link">
        <h2>Week ${week}</h2>
      </a>
    </div>
  `
    )
    .join("\n");

  const historyIndexHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>History | Hacker News AI 中文翻译</title>
  <link rel="stylesheet" href="../css/style.css">
</head>
<body id="top">
  <div class="back-to-index"><a href="../index.html">← Back to Latest</a></div>
  
  <h1>历史文章，按周分类</h1>
  
  <div class="weeks-list">
    ${weeksList}
  </div>
  
  <a href="#top" class="back-to-top" title="Back to top">↑</a>
  
  ${createFooter()}
</body>
</html>`;

  await fs.writeFile(indexPath, historyIndexHtml);
}

function createInfoCard(weekId: string): string {
  const [year, week] = weekId.split("-");
  return `
  <div class="info-card">
    <div class="info-section">
      <p>文章使用 Google gemini AI 翻译，每4小时更新。</p>
      <p>所有内容保留原文链接和 Hacker News 评论区链接。</p>
      <p>
        查看 <a href="./history/${weekId}.html">${year} 年第 ${week} 周所有文章</a> 或 
        浏览 <a href="./history/index.html">历史文章</a>
      </p>
      <p><a href="./rss.xml" class="rss-link">RSS Feed</a></p>
    </div>
  </div>`;
}

/**
 * Main function to process the JSON file
 */
async function processJsonFile(
  inputFilePath: string,
  outputDir: string
): Promise<void> {
  try {
    // Create R2 client
    const r2Client = new S3Client({
      region: "auto",
      endpoint: `https://${r2Config.accountId}.r2.cloudflarestorage.com`,
      credentials: {
        accessKeyId: r2Config.accessKeyId,
        secretAccessKey: r2Config.secretAccessKey,
      },
    });

    // Create output directory if it doesn't exist
    await fs.ensureDir(outputDir);

    // Create css directory in the output folder
    const cssOutputDir = path.join(outputDir, "css");
    await fs.ensureDir(cssOutputDir);

    // Copy the CSS file to the output directory
    const cssSourcePath = path.join(
      process.cwd(),
      "public",
      "css",
      "style.css"
    );
    const cssDestPath = path.join(cssOutputDir, "style.css");
    await fs.copy(cssSourcePath, cssDestPath);
    console.log(`CSS file copied to ${cssDestPath}`);

    // Read and parse the JSON file
    const jsonData = (await fs.readJson(inputFilePath)) as Article[];

    if (!Array.isArray(jsonData)) {
      throw new Error("Input JSON is not an array");
    }

    console.log(`Found ${jsonData.length} articles to process`);

    // Get current week ID and merge with weekly history
    const weekId = getWeekId();
    const weeklyData = await mergeWithWeeklyHistory(jsonData, r2Client, weekId);

    // Generate weekly history page
    await generateWeeklyPage(weeklyData, outputDir);

    // Generate history index page
    const availableWeeks = await listWeeklyFiles(r2Client);
    await generateHistoryIndexPage(availableWeeks, outputDir);

    // Process latest articles for index page
    const latestArticles = jsonData.slice(0, 30);
    const processedArticles: ProcessedArticle[] = latestArticles.map(
      (article) => {
        const sanitizedTitle = article.title
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "");

        return {
          id: article.id,
          title: article.title,
          rewritten_title: article.rewritten_title || article.title,
          url: article.url,
          filename: `${article.id}-${sanitizedTitle}.html`,
          summary: article.summary,
        };
      }
    );

    // Generate individual article pages
    for (const article of latestArticles) {
      try {
        const htmlContent = await markdownToHtml(article.rewritten_content);
        const sanitizedTitle = article.title
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "");

        const filename = `${article.id}-${sanitizedTitle}.html`;
        const outputPath = path.join(outputDir, filename);

        const backToIndex = createBackToIndex();
        const footer = createFooter();

        const fullHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${article.rewritten_title || article.title}</title>
  <link rel="stylesheet" href="./css/style.css">
</head>
<body id="top">
  ${backToIndex}
  
  <h1>${article.rewritten_title || article.title}</h1>
  <div class="article-meta">
    <span class="original-title">${article.title}</span>
    <div>
      <a href="${
        article.url
      }" target="_blank" class="article-source">Source</a> | 
      <a href="https://news.ycombinator.com/item?id=${
        article.id
      }" target="_blank" class="article-comments">HN Comments</a>
    </div>
  </div>
  ${
    article.summary
      ? `<div class="article-summary-box">${article.summary}</div>`
      : ""
  }
  <div class="content">
    ${htmlContent}
  </div>
  
  <a href="#top" class="back-to-top" title="Back to top">↑</a>
  
  ${footer}
</body>
</html>`;

        await fs.writeFile(outputPath, fullHtml);
        console.log(`Processed article ${article.id}: ${outputPath}`);
      } catch (err) {
        console.error(`Error processing article ${article.id}:`, err);
      }
    }

    // Create index.html with latest articles and weekly navigation
    const indexPath = path.join(outputDir, "index.html");
    const articleCards = createArticleCards(processedArticles);
    const infoCard = createInfoCard(weekId);
    const footer = createFooter();

    const indexHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hacker News Posts | Hacker News AI 中文翻译 每4小时更新</title>
  <meta name="description" content="Hacker News AI 中文翻译 每4小时更新">
  <link rel="stylesheet" href="./css/style.css">
  <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="./rss.xml">
</head>
<body id="top">
  <h1>Latest Hacker News Posts</h1>
  
  ${infoCard}
  
  <div class="article-list">
    ${articleCards}
  </div>
  
  <div class="read-all-container">
    <button id="readAllBtn" class="read-all-btn">Mark All as Read</button>
  </div>

  <a href="#top" class="back-to-top" title="Back to top">↑</a>
  
  ${footer}
  <script>
    function toggleRead(articleId) {
      const card = document.querySelector(\`.article-card[data-article-id="\${articleId}"]\`);
      const readArticles = JSON.parse(localStorage.getItem('readArticles') || '[]');
      
      if (card.classList.contains('read')) {
        card.classList.remove('read');
        const index = readArticles.indexOf(articleId);
        if (index > -1) readArticles.splice(index, 1);
      } else {
        card.classList.add('read');
        if (!readArticles.includes(articleId)) readArticles.push(articleId);
      }
      
      localStorage.setItem('readArticles', JSON.stringify(readArticles));
    }

    function markAllAsRead() {
      const allCards = document.querySelectorAll('.article-card');
      const readArticles = JSON.parse(localStorage.getItem('readArticles') || '[]');
      
      allCards.forEach(card => {
        const articleId = parseInt(card.dataset.articleId);
        card.classList.add('read');
        if (!readArticles.includes(articleId)) {
          readArticles.push(articleId);
        }
      });
      
      localStorage.setItem('readArticles', JSON.stringify(readArticles));
    }

    document.addEventListener('DOMContentLoaded', () => {
      const readArticles = JSON.parse(localStorage.getItem('readArticles') || '[]');
      readArticles.forEach(id => {
        const card = document.querySelector(\`.article-card[data-article-id="\${id}"]\`);
        if (card) card.classList.add('read');
      });

      document.getElementById('readAllBtn').addEventListener('click', markAllAsRead);
    });
  </script>
</body>
</html>`;

    await fs.writeFile(indexPath, indexHtml);
    console.log(`Created index file: ${indexPath}`);

    // Generate RSS feed from latest articles
    await generateRssFeed(processedArticles, outputDir, latestArticles);
    console.log(`Generated RSS feed: ${path.join(outputDir, "rss.xml")}`);

    console.log("All articles processed successfully!");
  } catch (err) {
    console.error("Error processing JSON file:", err);
    throw err;
  }
}

// Check if this file is being run directly
const isMainModule = import.meta.url === `file://${process.argv[1]}`;

if (isMainModule) {
  // Get command line arguments
  const args = process.argv.slice(2);

  if (args.length < 2) {
    console.error(
      "Usage: node --loader ts-node/esm src/converter.ts <input-json-file> <output-directory>"
    );
    process.exit(1);
  }

  const [inputFilePath, outputDir] = args;

  // Run the main function
  processJsonFile(inputFilePath, outputDir)
    .then(() => {
      console.log("Conversion completed successfully!");
    })
    .catch((err) => {
      console.error("Conversion failed:", err);
      process.exit(1);
    });
}

// Export for potential use as a module
export { processJsonFile, markdownToHtml };
